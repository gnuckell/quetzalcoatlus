[gd_scene load_steps=11 format=3 uid="uid://ir7jko68gpr2"]

[ext_resource type="Script" uid="uid://heep04q43cg6" path="res://assets/scripts/pawn.gd" id="1_bdn8e"]
[ext_resource type="PackedScene" uid="uid://c1fvcg0dlxg2e" path="res://assets/scenes/placeholder.tscn" id="1_dxlvn"]
[ext_resource type="Script" uid="uid://doj4vyigvl0ai" path="res://assets/scripts/reach_area.gd" id="3_ouwj3"]
[ext_resource type="Script" uid="uid://cb0ybvp7mt17e" path="res://assets/scripts/behavior.gd" id="3_thq2t"]
[ext_resource type="Script" uid="uid://bq6ujp8rovsjg" path="res://assets/scripts/grabber.gd" id="4_6lxlu"]
[ext_resource type="Script" uid="uid://bfm2m5jgefara" path="res://assets/scripts/float_range.gd" id="4_xig1i"]

[sub_resource type="GDScript" id="GDScript_6lxlu"]
resource_name = "pawn_sprite"
script/source = "extends AnimatedSprite3D

@onready var pawn : Pawn = get_parent()

var turned : bool :
	get: return flip_h
	set(value):
		if (flip_h == value): return
		recursive_flip(self)
		self.look_at(self.global_position + (Vector3.BACK if self.flip_h else Vector3.FORWARD))


func _physics_process(delta: float) -> void:
	if abs(pawn.velocity.x) > 0.1:
		turned = pawn.velocity.x < 0.0


func recursive_flip(sprite: SpriteBase3D) -> void:
	sprite.flip_h = not sprite.flip_h
	sprite.offset = sprite.offset * Vector2(-1, 1)
	for child in sprite.get_children(): if child is SpriteBase3D: recursive_flip(child)
	
"

[sub_resource type="BoxShape3D" id="BoxShape3D_st1bq"]
size = Vector3(1, 1, 0.5)

[sub_resource type="Resource" id="Resource_ouwj3"]
script = ExtResource("4_xig1i")
minimum = 10.0
maximum = 20.0
metadata/_custom_type_script = "uid://bfm2m5jgefara"

[sub_resource type="Resource" id="Resource_6lxlu"]
script = ExtResource("4_xig1i")
minimum = 2.0
maximum = 2.0
metadata/_custom_type_script = "uid://bfm2m5jgefara"

[node name="pawn" type="CharacterBody3D" node_paths=PackedStringArray("behavior")]
collision_layer = 4
collision_mask = 3
axis_lock_angular_x = true
axis_lock_angular_y = true
axis_lock_angular_z = true
wall_min_slide_angle = 3.14159
floor_constant_speed = true
floor_block_on_wall = false
floor_max_angle = 1.55334
floor_snap_length = 0.5
script = ExtResource("1_bdn8e")
behavior = NodePath("behavior")
walk_accel = 1.0

[node name="sprite" type="AnimatedSprite3D" parent="."]
billboard = 1
alpha_cut = 1
script = SubResource("GDScript_6lxlu")

[node name="placeholder" parent="sprite" instance=ExtResource("1_dxlvn")]
text = "PAWN"

[node name="sprite_area" type="Area3D" parent="sprite"]
visible = false
collision_layer = 8
collision_mask = 0

[node name="shape" type="CollisionShape3D" parent="sprite/sprite_area"]
shape = SubResource("BoxShape3D_st1bq")

[node name="grabber" type="Generic6DOFJoint3D" parent="sprite"]
node_a = NodePath("../..")
script = ExtResource("4_6lxlu")

[node name="shape" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_st1bq")

[node name="reach_area" type="Area3D" parent="."]
collision_layer = 16
collision_mask = 4
monitorable = false
script = ExtResource("3_ouwj3")

[node name="shape" type="CollisionShape3D" parent="reach_area"]

[node name="behavior" type="NavigationAgent3D" parent="." node_paths=PackedStringArray("grabber")]
path_desired_distance = 0.5
target_desired_distance = 0.5
debug_enabled = true
script = ExtResource("3_thq2t")
grabber = NodePath("../sprite/grabber")
wander_distance_range = SubResource("Resource_ouwj3")
wander_time_range = SubResource("Resource_6lxlu")

[node name="nav_timer" type="Timer" parent="behavior"]
process_callback = 0
wait_time = 0.2
autostart = true

[node name="wander_timer" type="Timer" parent="behavior"]
process_callback = 0
autostart = true

[connection signal="body_entered" from="reach_area" to="reach_area" method="_when_body_entered"]
[connection signal="body_exited" from="reach_area" to="reach_area" method="_when_body_exited"]
[connection signal="entered_selection" from="behavior" to="behavior" method="_when_entered_selection"]
[connection signal="exited_selection" from="behavior" to="behavior" method="_when_exited_selection"]
[connection signal="target_reached" from="behavior" to="behavior" method="_when_target_reached"]
[connection signal="timeout" from="behavior/wander_timer" to="behavior" method="wander"]
